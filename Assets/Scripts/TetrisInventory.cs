//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
using System;
public class TetrisInventory : Inventory {
	/// <summary>
	/// The size of the cell.
	/// </summary>
	public float cellSize;

	/// <summary>
	/// The margins.
	/// </summary>
	public float margins;

	/// <summary>
	/// The width.
	/// </summary>
	public float width;

	/// <summary>
	/// The height.
	/// </summary>
	public float height;

	/// <summary>
	/// The items, mapped to their locations.
	/// </summary>
	private List<TetrisInventoryItem> items = new List<TetrisInventoryItem>();

	/// <summary>
	/// Initializes a new instance of the <see cref="TetrisInventory"/> class.
	/// </summary>
	public TetrisInventory(){

	}

	/// <summary>
	/// Cans the be inserted.
	/// </summary>
	/// <returns><c>true</c>, if be inserted was caned, <c>false</c> otherwise.</returns>
	/// <param name="item">Item.</param>
	/// <param name="pos">Position.</param>
	private bool canBeInserted(InventoryItem item, Vector2 pos){
		Rect thisObj = new Rect(pos, item.Size);
		foreach(TetrisInventoryItem cur in items){
			Rect thatObj = new Rect(cur.position, cur.item.Size);
			if(thisObj.Overlaps(thatObj)){
				return false;
			}
		}
		return true;
	}

	/// <summary>
	/// Adds an item to the inventory.
	/// </summary>
	/// <returns><c>true</c>, if item was added, <c>false</c> otherwise.</returns>
	/// <param name="item">Item.</param>
	/// <param name="xpos">Position.</param>
	public bool AddItem(InventoryItem item, Vector2 pos){
		if (canBeInserted (item, pos)) {
			items.Add(new TetrisInventoryItem(item, pos));
			return true;
		} else {
			return false;
		}
	}

	/// <summary>
	/// Removes the item.
	/// </summary>
	/// <returns><c>true</c>, if item was removed, <c>false</c> otherwise.</returns>
	/// <param name="item">Item to remove.</param>
	/// <param name="quantity">Quantity to remove.</param>
	public bool RemoveItem(InventoryItem item, int quantity){
		//First off, get the contents of this type and make sure the requested quantity exists
		int count = 0;
		foreach (InventoryItem cur in GetContents()) {
			if(cur.GetType() == item.GetType()){
				count += cur.StackCount;
			}
		}
		if (count < quantity)
			return false;

		//Now remove all those items
		foreach(TetrisInventoryItem cur in items){
			if(cur.item.GetType() == item.GetType()){
				if(count <= item.StackCount){
					cur.item.StackCount -= count;
					count = 0;
				}else{
					count -= cur.item.StackCount;
					cur.item.StackCount = 0;
				}
			}
		}

		//Clean up any empty stacks
		items.RemoveAll ((TetrisInventoryItem p) => {
			return p.item.StackCount == 0;
		});

		return true;
	}

	/// <summary>
	/// Gets the contents of the inventory.
	/// </summary>
	/// <returns>The contents.</returns>
	public override List<InventoryItem> GetContents (){
		List<InventoryItem> retval = new List<InventoryItem> ();
		foreach (TetrisInventoryItem cur in items) {
			retval.Add(cur.item);
		}
		return retval;
	}

	/// <summary>
	/// Gets the contents of the inventory that match the given type.
	/// </summary>
	/// <returns>The contents.</returns>
	/// <typeparam name="T">The type of the object you're looking for.</typeparam>
	public override List<T> GetContents<T> (){
		List<T> retval = new List<T> ();
		foreach (InventoryItem cur in GetContents ()) {
			if(cur is T){
				retval.Add((T)cur);
			}
		}
		return retval;
	}

	/// <summary>
	/// Gets the total weight.
	/// </summary>
	/// <returns>The total weight.</returns>
	public override double GetTotalWeight (){
		double weight = 0;
		foreach (TetrisInventoryItem cur in items) {
			weight += cur.item.Weight*cur.item.StackCount;
		}
		return weight;
	}

	/// <summary>
	/// Draw at the specified place.
	/// </summary>
	/// <param name="place">Place to draw.</param>
	public override void Draw (Rect place){
		//TODO
	}
}

