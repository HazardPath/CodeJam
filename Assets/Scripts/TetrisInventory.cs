//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
using System;
public class TetrisInventory : Inventory {
	/// <summary>
	/// The size of the cell.
	/// </summary>
	public float cellSize;

	/// <summary>
	/// The margins.
	/// </summary>
	public float margins;

	/// <summary>
	/// The width.
	/// </summary>
	public float width;

	/// <summary>
	/// The height.
	/// </summary>
	public float height;

	/// <summary>
	/// The items.
	/// </summary>
	private List<InventoryItem> items = new List<InventoryItem>();

	/// <summary>
	/// Initializes a new instance of the <see cref="TetrisInventory"/> class.
	/// </summary>
	public TetrisInventory(){

	}

	/// <summary>
	/// Adds an item to the inventory.
	/// </summary>
	/// <returns><c>true</c>, if item was added, <c>false</c> otherwise.</returns>
	/// <param name="item">Item.</param>
	/// <param name="xpos">X position.</param>
	/// <param name="ypos">Y position.</param>
	public bool AddItem(InventoryItem item, int xpos, int ypos){
		return false;
	}

	/// <summary>
	/// Gets the contents of the inventory.
	/// </summary>
	/// <returns>The contents.</returns>
	public override List<InventoryItem> GetContents (){
		return null;
	}

	/// <summary>
	/// Gets the contents of the inventory that match the given type.
	/// </summary>
	/// <returns>The contents.</returns>
	/// <typeparam name="T">The type of the object you're looking for.</typeparam>
	public override List<T> GetContents<T> (){
		return null;
	}

	/// <summary>
	/// Gets the total weight.
	/// </summary>
	/// <returns>The total weight.</returns>
	public override double GetTotalWeight (){
		return 0;
	}

	/// <summary>
	/// Draw at the specified place.
	/// </summary>
	/// <param name="place">Place to draw.</param>
	public override void Draw (Rect place){

	}
}

