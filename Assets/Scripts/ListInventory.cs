//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class ListInventory : Inventory
{
	/// <summary>
	/// The contents of the Inventory.
	/// </summary>
	private List<InventoryItem> contents;

	/// <summary>
	/// Initializes a new instance of the <see cref="ListInventory"/> class.
	/// </summary>
	public ListInventory ()
	{
		this.contents = new List<InventoryItem> ();
	}

	/// <summary>
	/// Adds the specified item to the Inventory.
	/// </summary>
	/// <param name="item">the item to be added</param>
	public void Add(InventoryItem item){
		this.contents.Add(item);
	}

	/// <summary>
	/// Removes the specified item from the Inventory.
	/// </summary>
	/// <param name="item">the item to be removed.</param>
	/// <returns><c>true</c> if the item was actually in the list; otherwise, <c>false</c>.</returns>
	public bool Remove(InventoryItem item)
	{
		return contents.Remove(item);
	}

	/// <summary>
	/// Gets a List with the contents of this Inventory.
	/// </summary>
	/// <returns>The contents of this Inventory instance.</returns>
	public override List<InventoryItem> GetContents()
	{
		return new List<InventoryItem> (contents);
	}

	/// <summary>
	/// Gets a List of the items in this Inventory that match the specified type.
	/// </summary>
	/// <returns>The contents of this Inventory instance that match the specified type.</returns>
	/// <typeparam name="T">The type of item to match.</typeparam>
	public override List<T> GetContents<T>()
	{
		List<T> tempList = new List<T> ();
		foreach (InventoryItem item in this.contents) {
			if (item is T){
				tempList.Add((T)item);
			}
		}
		return tempList;
	}

	/// <summary>
	/// Gets the total weight of all items in the Inventory instance.
	/// </summary>
	/// <returns>The total weight.</returns>
	public override double GetTotalWeight ()
	{
		double tempWeight = 0.0;

		foreach (InventoryItem item in this.contents) {
			tempWeight += item.Weight;
		}

		return tempWeight;
	}

	/// <summary>
	/// Draw the Inventory instance at the specified place.
	/// </summary>
	/// <param name="place">the place at which to draw the invent'ry</param>
	public override void Draw (UnityEngine.Rect place)
	{
		throw new NotImplementedException ();
	}
}